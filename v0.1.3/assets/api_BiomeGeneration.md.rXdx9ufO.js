import{_ as p,C as h,c as l,o as r,j as s,aA as t,a as n,G as a,w as o}from"./chunks/framework.dIpQmRHt.js";const P=JSON.parse('{"title":"BiomeGeneration","description":"","frontmatter":{},"headers":[],"relativePath":"api/BiomeGeneration.md","filePath":"api/BiomeGeneration.md","lastUpdated":null}'),d={name:"api/BiomeGeneration.md"},k={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},b={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},E={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.439ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.791ex",height:"1.971ex",role:"img",focusable:"false",viewBox:"0 -677 3885.5 871","aria-hidden":"true"},C={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},G={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""};function x(S,i,I,Q,N,M){const e=h("Badge");return r(),l("div",null,[i[81]||(i[81]=s("h1",{id:"biomegeneration",tabindex:"-1"},[n("BiomeGeneration "),s("a",{class:"header-anchor",href:"#biomegeneration","aria-label":'Permalink to "BiomeGeneration"'},"​")],-1)),s("details",k,[s("summary",null,[i[0]||(i[0]=s("a",{id:"Cubiomes.BiomeGeneration",href:"#Cubiomes.BiomeGeneration"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration")],-1)),i[1]||(i[1]=n()),a(e,{type:"info",class:"jlObjectType jlModule",text:"Module"})]),i[3]||(i[3]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BiomeGeneration</span></span></code></pre></div><p>Module for generating biomes in Minecraft worlds.</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>Like almost everything in this package, the coordinates order is always<code>(x, z, y)</code>, not <code>(x, y, z)</code> weither it is for function calls, world indexing, etc. If it is too confusing, hide the order by working directly over the coordinate objects, or use keyword arguments.</p></div><p>The typical workflow is:</p><ol><li><p>Create a dimension object (e.g. <code>Overworld</code>, <code>Nether</code>, <code>End</code>) -&gt; <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.Dimension"><code>Dimension</code></a></p></li><li><p>Set the seed of the dimension -&gt; <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.set_seed!-Tuple{Dimension, Any}"><code>set_seed!</code></a></p></li><li><p>Get the biome at a specific coordinate -&gt; <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.get_biome"><code>get_biome</code></a></p></li></ol><p>Or:</p><ol><li><p>Create a world object -&gt; <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.BiomeArrays.WorldMap-Union{NTuple{N, UnitRange}, Tuple{N}} where N"><code>WorldMap</code></a></p></li><li><p>Generate the biomes in the world -&gt; <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.gen_biomes!-Tuple{Dimension, AbstractArray{Biome}}"><code>gen_biomes!</code></a></p></li></ol><p>The biomes are stored in a <code>WorldMap</code> object, which is a 3D array of biomes. To get the coordinates of the biomes, use the <code>coordinates</code> function. It gives an iterator of <code>CartesianIndex</code> objects, a built-in Julia type. So any intuitive indexing should work out of the box.</p>',8)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[2]||(i[2]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/BiomeGeneration.jl#L1-L27",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i[82]||(i[82]=t('<h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><ul><li><a href="#Cubiomes.BiomeGeneration.Dimension"><code>Cubiomes.BiomeGeneration.Dimension</code></a></li><li><a href="#Cubiomes.BiomeGeneration.End"><code>Cubiomes.BiomeGeneration.End</code></a></li><li><a href="#Cubiomes.BiomeGeneration.Nether"><code>Cubiomes.BiomeGeneration.Nether</code></a></li><li><a href="#Cubiomes.BiomeGeneration.Overworld"><code>Cubiomes.BiomeGeneration.Overworld</code></a></li><li><a href="#Cubiomes.BiomeGeneration.Scale"><code>Cubiomes.BiomeGeneration.Scale</code></a></li><li><a href="#Cubiomes.BiomeGeneration.SomeSha"><code>Cubiomes.BiomeGeneration.SomeSha</code></a></li><li><a href="#Cubiomes.BiomeGeneration.fill_radius!-Union{Tuple{N}, Tuple{AbstractArray{Biome, N}, CartesianIndex{2}, Biome, Any}} where N"><code>Cubiomes.BiomeGeneration.fill_radius!</code></a></li><li><a href="#Cubiomes.BiomeGeneration.gen_biomes!-Tuple{Dimension, AbstractArray{Biome}}"><code>Cubiomes.BiomeGeneration.gen_biomes!</code></a></li><li><a href="#Cubiomes.BiomeGeneration.get_biome"><code>Cubiomes.BiomeGeneration.get_biome</code></a></li><li><a href="#Cubiomes.BiomeGeneration.original_get_biome-Tuple{Cubiomes.BiomeGeneration.End1_9Plus, Any, Any, Scale{4}}"><code>Cubiomes.BiomeGeneration.original_get_biome</code></a></li><li><a href="#Cubiomes.BiomeGeneration.set_seed!-Tuple{Dimension, Any}"><code>Cubiomes.BiomeGeneration.set_seed!</code></a></li><li><a href="#Cubiomes.BiomeGeneration.similar_expand-Union{Tuple{T}, Tuple{Type{T}, OffsetArrays.OffsetMatrix{T} where T, Int64, Int64}} where T"><code>Cubiomes.BiomeGeneration.similar_expand</code></a></li><li><a href="#Cubiomes.BiomeGeneration.view_reshape_cache_like"><code>Cubiomes.BiomeGeneration.view_reshape_cache_like</code></a></li></ul><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2>',3)),s("details",m,[s("summary",null,[i[4]||(i[4]=s("a",{id:"Cubiomes.BiomeGeneration.Dimension",href:"#Cubiomes.BiomeGeneration.Dimension"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.Dimension")],-1)),i[5]||(i[5]=n()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[7]||(i[7]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Dimension</span></span></code></pre></div><p>The parent type of every Minecraft dimension. There is generally three steps to use a dimension:</p><ol><li><p>Create one dimension with a specific <a href="/Cubiomes.jl/v0.1.3/api/MCVersions#Cubiomes.MCVersions.MCVersion"><code>MCVersion</code></a> and maybe some specific arguments.</p></li><li><p>Set the seed of the dimension with <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.set_seed!-Tuple{Dimension, Any}"><code>set_seed!</code></a>.</p></li><li><p>Do whatever you want with the dimension: get biomes, generate biomes, etc.</p></li></ol><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> overworld </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Overworld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(undef, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mcv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.18&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set_seed!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(overworld, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_biome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(overworld, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">63</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dark_forest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Biome</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x1d</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set_seed!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(overworld, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I love cats&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> world </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> WorldMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">63</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gen_biomes!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(overworld, world, scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">📏</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1:4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>See also:</p><ul><li><p><a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.Nether"><code>Nether</code></a>, <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.Overworld"><code>Overworld</code></a>, <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.End"><code>End</code></a></p></li><li><p><a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.set_seed!-Tuple{Dimension, Any}"><code>set_seed!</code></a>, <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.get_biome"><code>get_biome</code></a>, <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.gen_biomes!-Tuple{Dimension, AbstractArray{Biome}}"><code>gen_biomes!</code></a></p></li><li><p><a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.BiomeArrays.WorldMap-Union{NTuple{N, UnitRange}, Tuple{N}} where N"><code>WorldMap</code></a>, <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.Scale"><code>Scale</code></a></p></li></ul><p><strong>Extended help</strong></p><p>This section is for developers that want to implement a new dimension.</p><p>The concrete type <code>TheDim</code> <em>MUST</em> implement:</p>`,10)),i[8]||(i[8]=s("ul",null,[s("li",null,[s("p",null,[n("An uninitialized constructor "),s("code",null,"TheDim(::UndefInitializer, ::MCVersion, args...)")])]),s("li",null,[s("p",null,[n("An inplace constructor "),s("code",null,"set_seed!(dim::TheDim, seed::UInt64, args...)"),n(". Be aware that the seed must be constrained to "),s("code",null,"UInt64"),n(" dispatch to work.")])]),s("li",{3:""},[s("p",null,[n("get_biome(dim::TheDim, coord, scale::Scale, args...) -> Biome where "),s("code",null,"coord"),n(" can be either (x::Real, z::Real, y::Real) or NTuple")])]),s("li",null,[s("p",null,"gen_biomes!(dim::TheDim, out::WorldMap, scale::Scale, args...)")])],-1)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[6]||(i[6]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/interface.jl#L83-L124",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",g,[s("summary",null,[i[9]||(i[9]=s("a",{id:"Cubiomes.BiomeGeneration.End",href:"#Cubiomes.BiomeGeneration.End"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.End")],-1)),i[10]||(i[10]=n()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[12]||(i[12]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">End</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UndefInitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MCVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>The Minecraft End dimension.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[11]||(i[11]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/dimensions/end.jl#L11-L15",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",u,[s("summary",null,[i[13]||(i[13]=s("a",{id:"Cubiomes.BiomeGeneration.Nether",href:"#Cubiomes.BiomeGeneration.Nether"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.Nether")],-1)),i[14]||(i[14]=n()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[16]||(i[16]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Nether</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UndefInitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MCVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>The Nether dimension. See <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.Dimension"><code>Dimension</code></a> for general usage.</p><p><strong>Minecraft version &lt;1.16</strong></p><p>Before version 1.16, the Nether is only composed of nether wastes. Nothing else.</p><p><strong>Minecraft version &gt;= 1.16 specificities</strong></p><ul><li><p>If the 1:1 scale will never be used, adding <code>sha=Val(false)</code> to <code>set_seed!</code> will save a very small amount of time (of the order of 100ns up to 1µs). The sha is a precomputed value only used for the 1:1 scale. But the default behavior is to compute the sha at each seed change for simplicity.</p></li><li><p>In the biome generation functions, a last paramter <code>confidence</code> can be passed. It is a performance-related parameter between 0 and 1. A bit the same as the <code>scale</code> parameter, but it is a continuous value, and the scale is not modified.</p></li></ul>',6)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[15]||(i[15]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/dimensions/nether.jl#L16-L35",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",c,[s("summary",null,[i[17]||(i[17]=s("a",{id:"Cubiomes.BiomeGeneration.Overworld",href:"#Cubiomes.BiomeGeneration.Overworld"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.Overworld")],-1)),i[18]||(i[18]=n()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[20]||(i[20]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Overworld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UndefInitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mcvt&quot;&gt;=1.18&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>The Overworld dimension. See <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.Dimension"><code>Dimension</code></a> for general usage.</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>At the moment, only version 1.18 and above are supported. Older versions will be supported in the future.</p></div><p><strong>Minecraft version &gt;= 1.18 specificities</strong></p><ul><li><p>If the 1:1 scale will never be used, adding <code>sha=Val(false)</code> to <code>set_seed!</code> will save a very small amount of time (of the order of 100ns up to 1µs). The sha is a precomputed value only used for the 1:1 scale. But the default behavior is to compute the sha at each seed change for simplicity.</p></li><li><p>Two keyword arguments are added to the biome generation:</p><ul><li><p><code>skip_depth=Val(false)</code>: if <code>Val(true)</code>, the depth sampling is skipped. Time saved: 1/3 of the biome generation time.</p></li><li><p><code>skip_shift=Val(false)</code>: only for the 1:1 and 1:4 scales. If <code>Val(true)</code>, the shift sampling is skipped. Time saved: 1/10 of the biome generation time.</p></li></ul></li></ul>',5)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[19]||(i[19]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/dimensions/overworld/overworld.jl#L3-L24",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",y,[s("summary",null,[i[21]||(i[21]=s("a",{id:"Cubiomes.BiomeGeneration.Scale",href:"#Cubiomes.BiomeGeneration.Scale"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.Scale")],-1)),i[22]||(i[22]=n()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[31]||(i[31]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Scale{N}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(N</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">📏</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1:N&quot;</span></span></code></pre></div><p>The scale of a map. It represents the ratio between the size of the map an the real world. For example, a 1:4 scale map means that each block in the map represents a 4x4 area in the real world. So the coordinates (5, 5) are equal to the real world coordinates (20, 20).</p>`,2)),s("p",null,[i[25]||(i[25]=s("code",null,"N",-1)),i[26]||(i[26]=n()),i[27]||(i[27]=s("strong",null,"MUST",-1)),i[28]||(i[28]=n(" ne to the form ")),s("mjx-container",b,[(r(),l("svg",E,i[23]||(i[23]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(1007.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1451.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2329.7,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(3385.5,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g></g></g>',1)]))),i[24]||(i[24]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msup",null,[s("mn",null,"4"),s("mi",null,"n")]),s("mo",null,","),s("mi",null,"n"),s("mo",null,"≥"),s("mn",null,"0")])],-1))]),i[29]||(i[29]=n(". So the more common scales are 1:1, 1:4, 1:16, 1:64, 1:256. The support for big scales is not guaranteed and depends on the function that uses it. Read the documentation of the function that uses it to know the supported values."))]),i[32]||(i[32]=t(`<p>It is possible to use the alternative syntax <code>📏&quot;1:N&quot;</code>. The emoji name is <code>:straight_ruler:</code>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Scale{4}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERROR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArgumentError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> The scale must be to the form </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n. Got </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> The closest valid scales are </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> and </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 📏</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1:4&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Scale{4}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,3)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[30]||(i[30]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/interface.jl#L15-L43",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",C,[s("summary",null,[i[33]||(i[33]=s("a",{id:"Cubiomes.BiomeGeneration.gen_biomes!-Tuple{Dimension, AbstractArray{Biome}}",href:"#Cubiomes.BiomeGeneration.gen_biomes!-Tuple{Dimension, AbstractArray{Biome}}"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.gen_biomes!")],-1)),i[34]||(i[34]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[36]||(i[36]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gen_biomes!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dimension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, world</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WorldMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,], args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Nothing</span></span></code></pre></div><p>Fill the world map with the biomes of the dimension <code>dim</code>. The scale is defaulted to 1:1. The args are specific to the dimension. See the documentation of the dimension for more information.</p><p>See also: <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.BiomeArrays.WorldMap-Union{NTuple{N, UnitRange}, Tuple{N}} where N"><code>WorldMap</code></a>, <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.Scale"><code>Scale</code></a>, <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.Dimension"><code>Dimension</code></a>, <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.get_biome"><code>get_biome</code></a></p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[35]||(i[35]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/interface.jl#L182-L190",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",f,[s("summary",null,[i[37]||(i[37]=s("a",{id:"Cubiomes.BiomeGeneration.get_biome",href:"#Cubiomes.BiomeGeneration.get_biome"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.get_biome")],-1)),i[38]||(i[38]=n()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[40]||(i[40]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_biome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dimension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,], args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Biome</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_biome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dimension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, coord, [scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,], args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Biome</span></span></code></pre></div><p>Get the biome at the coordinates <code>(x, z, y)</code> in the dimension <code>dim</code>. The coordinates can be passed as numbers or as tuples or as <code>CartesianIndex</code> (the coords returned by <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.BiomeArrays.coordinates-Tuple{AbstractArray{Biome}}"><code>coordinates</code></a>). The scale is defaulted to 1:1 (the more precise).</p><p>The scale is defaulted to 1:1, i.e. the exact coordinates. The args are specific to the dimension. See the documentation of the dimension for more information.</p><p>See also: - <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.Scale"><code>Scale</code></a>, <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.gen_biomes!-Tuple{Dimension, AbstractArray{Biome}}"><code>gen_biomes!</code></a>, <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.Dimension"><code>Dimension</code></a></p>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[39]||(i[39]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/interface.jl#L145-L158",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",T,[s("summary",null,[i[41]||(i[41]=s("a",{id:"Cubiomes.BiomeGeneration.set_seed!-Tuple{Dimension, Any}",href:"#Cubiomes.BiomeGeneration.set_seed!-Tuple{Dimension, Any}"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.set_seed!")],-1)),i[42]||(i[42]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[44]||(i[44]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_seed!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dimension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, seed; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Set the seed of the dimension generator. It can be any valid seed you can pass like in Minecraft, but UInt64 is better if performance is a concern. To transform an UInt64 seed to a &quot;normal&quot; one, use <code>signed(seed)</code>.</p><p>Other keyword arguments can be passed, specific to the dimension / minecraft version. They are often related to some micro-optimizations. See the documentation of the specific dimension for more information.</p><p>See also: <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.Nether"><code>Nether</code></a>, <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.Overworld"><code>Overworld</code></a>, <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.End"><code>End</code></a></p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[43]||(i[43]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/interface.jl#L129-L141",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",F,[s("summary",null,[i[45]||(i[45]=s("a",{id:"Cubiomes.BiomeGeneration.BiomeArrays.WorldMap-Union{NTuple{N, UnitRange}, Tuple{N}} where N",href:"#Cubiomes.BiomeGeneration.BiomeArrays.WorldMap-Union{NTuple{N, UnitRange}, Tuple{N}} where N"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.BiomeArrays.WorldMap")],-1)),i[46]||(i[46]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[48]||(i[48]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WorldMap{N} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> N (N </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WorldMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xrange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UnitRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, zrange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UnitRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, yrange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UnitRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WorldMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xrange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UnitRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, zrange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UnitRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WorldMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xrange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UnitRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, zrange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UnitRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WorldMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;x, z, y)</span></span></code></pre></div><p>A 2D or 3D array of biomes. It is the main data structure used to store the biomes of a Minecraft world. It is a simple wrapper around <code>AbstractArray{Biome, N}</code>. So anything that works with arrays should work with <code>WorldMap</code>.</p><p>See also: <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.BiomeArrays.view2d-Tuple{AbstractArray{Biome, 3}}"><code>view2d</code></a>, <a href="/Cubiomes.jl/v0.1.3/api/BiomeGeneration#Cubiomes.BiomeGeneration.BiomeArrays.coordinates-Tuple{AbstractArray{Biome}}"><code>coordinates</code></a></p>`,3)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[47]||(i[47]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/BiomeArrays.jl#L12-L24",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",B,[s("summary",null,[i[49]||(i[49]=s("a",{id:"Cubiomes.BiomeGeneration.BiomeArrays.coordinates-Tuple{AbstractArray{Biome}}",href:"#Cubiomes.BiomeGeneration.BiomeArrays.coordinates-Tuple{AbstractArray{Biome}}"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.BiomeArrays.coordinates")],-1)),i[50]||(i[50]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[52]||(i[52]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(M</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WorldMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CartesianIndices</span></span></code></pre></div><p>Wrapper around <code>CartesianIndices</code> to get the coordinates of the biomes in the map. Useful to iterate over the coordinates of the map.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[51]||(i[51]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/BiomeArrays.jl#L58-L63",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",_,[s("summary",null,[i[53]||(i[53]=s("a",{id:"Cubiomes.BiomeGeneration.BiomeArrays.view2d-Tuple{AbstractArray{Biome, 3}}",href:"#Cubiomes.BiomeGeneration.BiomeArrays.view2d-Tuple{AbstractArray{Biome, 3}}"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.BiomeArrays.view2d")],-1)),i[54]||(i[54]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[56]||(i[56]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view2d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(W</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WorldMap{3}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WorldMap{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>View a 3D world as a 2D world. Only works if the y size is 1. Otherwise, it throws an error. Useful for functions that only work with 2D worlds, even if the y size is 1, like 2d visualization.</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>The returned object is a view, so modifying it will also modify the original world. Use <code>copy</code> to get a new independent world.</p></div>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[55]||(i[55]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/BiomeArrays.jl#L36-L46",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i[83]||(i[83]=s("h2",{id:"Private-API",tabindex:"-1"},[n("Private API "),s("a",{class:"header-anchor",href:"#Private-API","aria-label":'Permalink to "Private API {#Private-API}"'},"​")],-1)),s("details",v,[s("summary",null,[i[57]||(i[57]=s("a",{id:"Cubiomes.BiomeGeneration.SomeSha",href:"#Cubiomes.BiomeGeneration.SomeSha"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.SomeSha")],-1)),i[58]||(i[58]=n()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[60]||(i[60]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SomeSha</span></span></code></pre></div><p>A struct that holds a <code>UInt64</code> or <code>nothing</code>. It is used to store the SHA of the seed if it is needed. Acts like a reference (a zero dimension array) to a <code>UInt64</code> or <code>nothing</code>. Use <code>sha[]</code> to get or store the value, or directly <code>set_seed!(sha, seed)</code> to compute the SHA of the seed and store it and <code>reset!(sha)</code> to set it to <code>nothing</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[59]||(i[59]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/interface.jl#L195-L202",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",A,[s("summary",null,[i[61]||(i[61]=s("a",{id:"Cubiomes.BiomeGeneration.fill_radius!-Union{Tuple{N}, Tuple{AbstractArray{Biome, N}, CartesianIndex{2}, Biome, Any}} where N",href:"#Cubiomes.BiomeGeneration.fill_radius!-Union{Tuple{N}, Tuple{AbstractArray{Biome, N}, CartesianIndex{2}, Biome, Any}} where N"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.fill_radius!")],-1)),i[62]||(i[62]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[64]||(i[64]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill_radius!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WorldMap{N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, center</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CartesianIndex{2}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Biome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, radius)</span></span></code></pre></div><p>Fills a circular area around the point <code>center</code> in <code>out</code> with the biome <code>id</code>, within a given <code>radius</code>. Assuming <code>radius</code>&gt;=0. If <code>center</code> is outside the <code>out</code> coordinates, nothing is done.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[63]||(i[63]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/dimensions/nether.jl#L168-L174",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",j,[s("summary",null,[i[65]||(i[65]=s("a",{id:"Cubiomes.BiomeGeneration.original_get_biome-Tuple{Cubiomes.BiomeGeneration.End1_9Plus, Any, Any, Scale{4}}",href:"#Cubiomes.BiomeGeneration.original_get_biome-Tuple{Cubiomes.BiomeGeneration.End1_9Plus, Any, Any, Scale{4}}"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.original_get_biome")],-1)),i[66]||(i[66]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[68]||(i[68]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">original_get_biome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(end_noise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EndNoise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x, z)</span></span></code></pre></div><p>Original algorithm to get the biome at a given point in the End dimension. It is only here for documentation purposes, because everything else is just optimizations and scaling on this basis (for scale &gt;= 4).</p><p>But not so sure that the optimizations are really important, most of ones are just avoid √ operations, but hypot is already really fast in Julia.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[67]||(i[67]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/dimensions/end.jl#L55-L64",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",G,[s("summary",null,[i[69]||(i[69]=s("a",{id:"Cubiomes.BiomeGeneration.similar_expand-Union{Tuple{T}, Tuple{Type{T}, OffsetArrays.OffsetMatrix{T} where T, Int64, Int64}} where T",href:"#Cubiomes.BiomeGeneration.similar_expand-Union{Tuple{T}, Tuple{Type{T}, OffsetArrays.OffsetMatrix{T} where T, Int64, Int64}} where T"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.similar_expand")],-1)),i[70]||(i[70]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[72]||(i[72]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">similar_expand{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mc_map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OffsetMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, expand_x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, expand_z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T</span></span></code></pre></div><p>Create an uninitialized OffsetMatrix of type <code>T</code> but with additional rows and columns on each side of the original matrix.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[71]||(i[71]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/dimensions/end.jl#L131-L136",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",D,[s("summary",null,[i[73]||(i[73]=s("a",{id:"Cubiomes.BiomeGeneration.view_reshape_cache_like",href:"#Cubiomes.BiomeGeneration.view_reshape_cache_like"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.view_reshape_cache_like")],-1)),i[74]||(i[74]=n()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[76]||(i[76]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view_reshape_cache_like</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axes)</span></span></code></pre></div><p>Create a view of the cache with the same shape as the axes.</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>This function is not thread-safe and should not be used in a multithreaded context.</p></div><p>This is a TODO: maybe use of @init from Floops.jl to create a thread-safe cache</p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[75]||(i[75]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/interface.jl#L221-L230",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",w,[s("summary",null,[i[77]||(i[77]=s("a",{id:"Cubiomes.BiomeGeneration.Voronoi.voronoi_access-Union{Tuple{T}, Tuple{UInt64, Tuple{T, T, T}}} where T",href:"#Cubiomes.BiomeGeneration.Voronoi.voronoi_access-Union{Tuple{T}, Tuple{UInt64, Tuple{T, T, T}}} where T"},[s("span",{class:"jlbinding"},"Cubiomes.BiomeGeneration.Voronoi.voronoi_access")],-1)),i[78]||(i[78]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[80]||(i[80]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">voronoi_access</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sha</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UInt64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, coord</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{CartesianIndex{3}, NTuple{3, T}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">voronoi_access</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sha</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UInt64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x, z, y)</span></span></code></pre></div><p>Compute the closest Voronoi cell based on the given coordinates (at 1:4 scale). Used by Minecraft to translate the 1:4 scale coordinates to the 1:1 scale.</p><p>For example we can find in some part of the biome generation source code:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_biome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dimension, x, z, y, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Scale{1}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sx, sz, zy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> voronoi_access</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dimension, x, z, y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        get_biome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dimension, sx, sz, sy, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span></code></pre></div>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:o(()=>i[79]||(i[79]=[s("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/e1a3022a9b6d801308c9afa942fed11a2529c7a6/src/biome_generation/voronoi.jl#L55-L69",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})])])}const L=p(d,[["render",x]]);export{P as __pageData,L as default};
