import{_ as n,C as p,c as h,o,j as i,az as e,a,G as l}from"./chunks/framework.DBkpLKmB.js";const x=JSON.parse('{"title":"Utils","description":"","frontmatter":{},"headers":[],"relativePath":"api/Utils.md","filePath":"api/Utils.md","lastUpdated":null}'),d={name:"api/Utils.md"},r={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""};function E(C,s,m,f,_,F){const t=p("Badge");return o(),h("div",null,[s[22]||(s[22]=i("h1",{id:"utils",tabindex:"-1"},[a("Utils "),i("a",{class:"header-anchor",href:"#utils","aria-label":'Permalink to "Utils"'},"​")],-1)),i("details",r,[i("summary",null,[s[0]||(s[0]=i("a",{id:"Cubiomes.Utils",href:"#Cubiomes.Utils"},[i("span",{class:"jlbinding"},"Cubiomes.Utils")],-1)),s[1]||(s[1]=a()),l(t,{type:"info",class:"jlObjectType jlModule",text:"Module"})]),s[2]||(s[2]=i("p",null,"Some utility functions and types that are used in various places in the codebase. It should not be used directly by the user and could be nice if this module does not exist at all.",-1)),s[3]||(s[3]=i("p",null,[i("a",{href:"https://github.com/arnaud-ma/Cubiomes.jl/blob/10be951b0da79a3a421b38572784af9f95a04b04/src/utils.jl#L1-L4",target:"_blank",rel:"noreferrer"},"source")],-1))]),s[23]||(s[23]=e('<h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><ul><li><a href="#Cubiomes.Utils.bytes2uint64-Tuple{Any}"><code>Cubiomes.Utils.bytes2uint64</code></a></li><li><a href="#Cubiomes.Utils.findfirst_default-Tuple{Function, Any, Any}"><code>Cubiomes.Utils.findfirst_default</code></a></li><li><a href="#Cubiomes.Utils.length_of_trimmed-Tuple{Any, Any}"><code>Cubiomes.Utils.length_of_trimmed</code></a></li><li><a href="#Cubiomes.Utils.u64_seed"><code>Cubiomes.Utils.u64_seed</code></a></li><li><a href="#Cubiomes.Utils.@map_inline-Tuple{Any, Any}"><code>Cubiomes.Utils.@map_inline</code></a></li><li><a href="#Cubiomes.Utils.@only_float32-Tuple{Any}"><code>Cubiomes.Utils.@only_float32</code></a></li></ul><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h2 id="Private-API" tabindex="-1">Private API <a class="header-anchor" href="#Private-API" aria-label="Permalink to &quot;Private API {#Private-API}&quot;">​</a></h2>',4)),i("details",k,[i("summary",null,[s[4]||(s[4]=i("a",{id:"Cubiomes.Utils.bytes2uint64-Tuple{Any}",href:"#Cubiomes.Utils.bytes2uint64-Tuple{Any}"},[i("span",{class:"jlbinding"},"Cubiomes.Utils.bytes2uint64")],-1)),s[5]||(s[5]=a()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[6]||(s[6]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bytes2uint64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(itr)</span></span></code></pre></div><p>Converts an iterator of bytes to an iterator of UInt64.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bytes2uint64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x02</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x03</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x04</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x06</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x07</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x08</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x09</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> collect</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element Vector{UInt64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0102030405060708</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x090a0b0c0d0e0f10</span></span></code></pre></div><p><a href="https://github.com/arnaud-ma/Cubiomes.jl/blob/10be951b0da79a3a421b38572784af9f95a04b04/src/utils.jl#L16-L28" target="_blank" rel="noreferrer">source</a></p>`,5))]),i("details",u,[i("summary",null,[s[7]||(s[7]=i("a",{id:"Cubiomes.Utils.findfirst_default-Tuple{Function, Any, Any}",href:"#Cubiomes.Utils.findfirst_default-Tuple{Function, Any, Any}"},[i("span",{class:"jlbinding"},"Cubiomes.Utils.findfirst_default")],-1)),s[8]||(s[8]=a()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[9]||(s[9]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">findfirst_default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(predicate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, A, default)</span></span></code></pre></div><p>Return the first index i of A where predicate(A[i]) is true. If no i satisfy this, default is returned instead.</p><p><a href="https://github.com/arnaud-ma/Cubiomes.jl/blob/10be951b0da79a3a421b38572784af9f95a04b04/src/utils.jl#L245-L250" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",g,[i("summary",null,[s[10]||(s[10]=i("a",{id:"Cubiomes.Utils.length_of_trimmed-Tuple{Any, Any}",href:"#Cubiomes.Utils.length_of_trimmed-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"Cubiomes.Utils.length_of_trimmed")],-1)),s[11]||(s[11]=a()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[12]||(s[12]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length_of_trimmed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(predicate, x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> N</span></span></code></pre></div><p>Returns the length of the collection <code>x</code> after removing the elements from the beginning and the end that satisfy the <code>predicate</code>.</p><p>⚠ The collection <em>must</em> have the property so that <code>x[i]</code> for <code>i</code> in firstindex(x):lastindex(x) is valid.</p><p><a href="https://github.com/arnaud-ma/Cubiomes.jl/blob/10be951b0da79a3a421b38572784af9f95a04b04/src/utils.jl#L179-L187" target="_blank" rel="noreferrer">source</a></p>',4))]),i("details",b,[i("summary",null,[s[13]||(s[13]=i("a",{id:"Cubiomes.Utils.u64_seed",href:"#Cubiomes.Utils.u64_seed"},[i("span",{class:"jlbinding"},"Cubiomes.Utils.u64_seed")],-1)),s[14]||(s[14]=a()),l(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[15]||(s[15]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u64_seed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><p>Converts <code>x</code> to <code>UInt64</code> for use as a seed, exactly as the Minecraft Java Edition does. It can be any integer or a string.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> u64_seed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1234</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00000000000004d2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> u64_seed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000006aefe2c4</span></span></code></pre></div><p><a href="https://github.com/arnaud-ma/Cubiomes.jl/blob/10be951b0da79a3a421b38572784af9f95a04b04/src/utils.jl#L46-L60" target="_blank" rel="noreferrer">source</a></p>`,5))]),i("details",y,[i("summary",null,[s[16]||(s[16]=i("a",{id:"Cubiomes.Utils.@map_inline-Tuple{Any, Any}",href:"#Cubiomes.Utils.@map_inline-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"Cubiomes.Utils.@map_inline")],-1)),s[17]||(s[17]=a()),l(t,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),s[18]||(s[18]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@map_inline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func, tuple)</span></span></code></pre></div><p>Inline the loop done by map(func, tuple), i.e. transform it to the tuple of the form <code>(:func(x1), :func(x2), ...)</code> at compile-time. Improves performance for small tuples.</p><p><a href="https://github.com/arnaud-ma/Cubiomes.jl/blob/10be951b0da79a3a421b38572784af9f95a04b04/src/utils.jl#L304-L309" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",c,[i("summary",null,[s[19]||(s[19]=i("a",{id:"Cubiomes.Utils.@only_float32-Tuple{Any}",href:"#Cubiomes.Utils.@only_float32-Tuple{Any}"},[i("span",{class:"jlbinding"},"Cubiomes.Utils.@only_float32")],-1)),s[20]||(s[20]=a()),l(t,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),s[21]||(s[21]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@only_float32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expr</span></span></code></pre></div><p>Transforms all real literals in the expr to Float32.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@only_float32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2im</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # expand to `1.0f0 + 2.0f0im`</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # expand to `x += 1.0f0`</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p><a href="https://github.com/arnaud-ma/Cubiomes.jl/blob/10be951b0da79a3a421b38572784af9f95a04b04/src/utils.jl#L266-L279" target="_blank" rel="noreferrer">source</a></p>',5))])])}const j=n(d,[["render",E]]);export{x as __pageData,j as default};
